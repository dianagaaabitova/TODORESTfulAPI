services:
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA='/var/lib/postgresql/data/pgdata'
    networks:
      - traefik-public
      - default
    volumes:
      - postgres-data:/var/lib/postgresql/data

  pgbouncer:
   image: edoburu/pgbouncer
   container_name: pgbouncer
   restart: always
   env_file:
     - .env
   environment:
     - DB_USER=${POSTGRES_USER}
     - DB_PASSWORD=${POSTGRES_PASSWORD}
     - DB_HOST=postgres
     - POOL_MODE=session
     - MAX_DB_CONNECTIONS=0
     - DEFAULT_POOL_SIZE=40
     - ADMIN_USERS=postgres,${POSTGRES_USER}
     - AUTH_TYPE=scram-sha-256
   expose:
     - ${POSTGRES_PORT}:${POSTGRES_PORT}
   volumes:
     - postgres-data:/var/lib/postgresql/data
   depends_on:
     - postgres
   networks:
     - traefik-public
     - default

  adminer:
    image: adminer
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - postgres
    environment:
      - ADMINER_DESIGN=galkaev
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.rule=Host(`adminer.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.middlewares=https-redirect
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.rule=Host(`adminer.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.tls.certresolver=le
      - traefik.http.services.${STACK_NAME?Variable not set}-adminer.loadbalancer.server.port=8080

  prometheus:
     image: prom/prometheus
     container_name: prometheus
     restart: always
     user: root
     volumes:
       - ./prometheus/configs/prometheus-localhost.yml:/etc/prometheus/prometheus.yml
       - ./prometheus/rules/alert.rules:/etc/prometheus/alert.rules
       - prometheus-data:/prometheus
     command:
       - '--config.file=/etc/prometheus/prometheus.yml'
       - '--storage.tsdb.path=/prometheus'
       - '--web.console.libraries=/etc/prometheus/console_libraries'
       - '--web.console.templates=/etc/prometheus/consoles'
     labels:
       - traefik.enable=true
       - traefik.docker.network=traefik-public
       - traefik.constraint-label=traefik-public
       - traefik.http.routers.${STACK_NAME?Variable not set}-prometheus-http.rule=Host(`prometheus.${DOMAIN?Variable not set}`)
       - traefik.http.routers.${STACK_NAME?Variable not set}-prometheus-http.entrypoints=http
       - traefik.http.routers.${STACK_NAME?Variable not set}-prometheus-http.middlewares=https-redirect
       - traefik.http.routers.${STACK_NAME?Variable not set}-prometheus-https.rule=Host(`prometheus.${DOMAIN?Variable not set}`)
       - traefik.http.routers.${STACK_NAME?Variable not set}-prometheus-https.entrypoints=https
       - traefik.http.routers.${STACK_NAME?Variable not set}-prometheus-https.tls=true
       - traefik.http.routers.${STACK_NAME?Variable not set}-prometheus-https.tls.certresolver=le
       - traefik.http.services.${STACK_NAME?Variable not set}-prometheus.loadbalancer.server.port=9090
     networks:
       - traefik-public
       - default

  grafana:
     image: grafana/grafana
     container_name: grafana
     restart: always
     volumes:
       - grafana-data:/var/lib/grafana
       - ./grafana/provisioning/datasources/prometheus.yml:/etc/grafana/provisioning/datasources/prometheus.yml
       - ./grafana/provisioning/dashboards/ds_prometheus.yml:/etc/grafana/provisioning/dashboards/ds_prometheus.yml
       - ./grafana/provisioning/dashboards/fastapi-dashboard.json:/etc/grafana/provisioning/dashboards/fastapi-dashboard.json
     environment:
       - GF_SERVER_ROOT_URL=http://grafana.${DOMAIN}
       - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
       - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
       - GF_USERS_ALLOW_SIGN_UP=false
       - PROMETHEUS_ENDPOINT=http://prometheus:9090
     labels:
       - traefik.enable=true
       - traefik.docker.network=traefik-public
       - traefik.constraint-label=traefik-public
       - traefik.http.routers.${STACK_NAME?Variable not set}-grafana-http.rule=Host(`grafana.${DOMAIN?Variable not set}`)
       - traefik.http.routers.${STACK_NAME?Variable not set}-grafana-http.entrypoints=http
       - traefik.http.routers.${STACK_NAME?Variable not set}-grafana-http.middlewares=https-redirect
       - traefik.http.routers.${STACK_NAME?Variable not set}-grafana-https.rule=Host(`grafana.${DOMAIN?Variable not set}`)
       - traefik.http.routers.${STACK_NAME?Variable not set}-grafana-https.entrypoints=https
       - traefik.http.routers.${STACK_NAME?Variable not set}-grafana-https.tls=true
       - traefik.http.routers.${STACK_NAME?Variable not set}-grafana-https.tls.certresolver=le
       - traefik.http.services.${STACK_NAME?Variable not set}-grafana.loadbalancer.server.port=3000
     networks:
       - traefik-public
       - default

  backend:
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - pgbouncer
    env_file:
      - .env

    command: >
      sh -c "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port $API_PORT --log-level info --forwarded-allow-ips '*' --proxy-headers"

    build:
      context: ./backend
      network: host
    platform: linux/amd64 # Patch for M1 Mac
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=${API_PORT}

      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=(Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)) && (PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`))
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.entrypoints=http

      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.rule=(Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)) && (PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`))
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls.certresolver=le

      # Define Traefik Middleware to handle domain with and without "www" to redirect to only one
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^http(s)?://www.(${DOMAIN?Variable not set})/(.*)
      # Redirect a domain with www to non-www
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=http$${1}://${DOMAIN?Variable not set}/$${3}

      # Enable www redirection for HTTP and HTTPS
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.middlewares=https-redirect,${STACK_NAME?Variable not set}-www-redirect
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.middlewares=${STACK_NAME?Variable not set}-www-redirect

volumes:
  prometheus-data: {}
  grafana-data: {}
  postgres-data: {}

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: true
